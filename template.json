{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "CloudConductor pattern template",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2/OpenStack KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength" : "1",
      "MaxLength" : "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },
    "SSHLocation" : {
      "Description" : "The IP address range that can be used to SSH to the EC2/OpenStack instances",
      "Type" : "String",
      "MinLength" : "9",
      "MaxLength" : "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "optionalInstanceType" : {
      "Description" : "OptionalServer instance type",
      "Type" : "String",
      "Default" : "t2.small"
    },
    "optionalImageId" : {
      "Description" : "[computed] OptionalServer Image Id. This parameter is automatically filled by CloudConductor.",
      "Type" : "String"
    },
    "VpcId" : {
      "Description" : "[computed] The Vpc Id which is used by platform pattern.",
      "Type" : "String"
    },
    "SubnetId" : {
      "Description" : "[computed] The Subnet Id which is used by platform pattern.",
      "Type" : "String"
    },
    "ClusterAddress" : {
      "Description" : "[computed] Private IP Address to join cluster.",
      "Type" : "String",
      "MinLength": "7",
      "MaxLength": "15",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription": "must be a valid IP address."
    },
    "SharedSecurityGroup" : {
      "Description" : "[computed] The SecurityGroup which is used by platform pattern.",
      "Type" : "String"
    },
    "CloudConductorLocation" : {
      "Description" : "The IP address range of CloudConductor server to enable serf rpc access to frontend instance.",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },

  "Mappings" : {
  },

  "Resources" : {

    "OptionalServer" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "Role" : "optional"
      },
      "Properties" : {
        "ImageId" : { "Ref" : "optionalImageId" },
        "InstanceType" : { "Ref" : "optionalInstanceType" },
        "KeyName" : { "Ref" : "KeyName" },
        "NetworkInterfaces" : [{
           "DeviceIndex" : "0",
           "NetworkInterfaceId" : { "Ref" : "OptionalNetworkInterface" }
        }],
        "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/sh -v\n",
          "# Helper function\n",
          "function error_exit\n",
          "{\n",
          "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "OptionalWaitHandle" }, "'\n",
          "  exit 1\n",
          "}\n",
          "# Set Parameters\n",
          "/bin/echo 'ROLE=optional' > /opt/cloudconductor/config\n",
          "/bin/echo 'SERF_JOIN_ADDRESS=", { "Ref" : "ClusterAddress" }, "' >> /opt/cloudconductor/config\n",
          "# Run Serf\n",
          "/etc/init.d/serf restart || error_exit 'Failed to start serf agent'\n",
          "# Wait member-join event\n",
          "host_name=`hostname`\n",
          "for i in `seq 10`; do\n",
          "  if [ ! -z \"`serf members | grep ${host_name}`\" ]; then\n",
          "    # Send success signal\n",
          "    /opt/aws/bin/cfn-signal -e 0 -r 'OptionalServer Setup complete' '", { "Ref" : "OptionalWaitHandle" }, "'\n",
          "    exit 0\n",
          "  fi\n",
          "  sleep 1\n",
          "done\n",
          "/opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "OptionalWaitHandle" }, "'\n",
          "exit 1\n"
        ]]}},
        "Tags" : [{"Key": "Name", "Value": "OptionalServer"}, {"Key": "Role", "Value": "optional"}]
      }
    },
    "OptionalNetworkInterface" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "GroupSet" : [{"Ref" : "SharedSecurityGroup"}, {"Ref" : "OptionalSecurityGroup"}],
        "SubnetId" : { "Ref" : "SubnetId" }
      }
    },
    "FrontendEIP" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "EIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "FrontendEIP", "AllocationId" ]},
        "NetworkInterfaceId" : { "Ref" : "OptionalNetworkInterface" }
      }
    },
    "OptionalSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access via port 80, Zabbix-agent access",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
        ]
      }
    },
    "OptionalWaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "OptionalWaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "OptionalServer",
      "Properties" : {
        "Handle" : { "Ref" : "OptionalWaitHandle" },
        "Timeout" : "600"
      }
    }
  },
  "Outputs" : {
    "FrontendAddress" : {
      "Value" : { "Ref" : "FrontendEIP" },
      "Description" : "Frontend DNS name or IP address to access serf rpc port from CloudConductor server. This output is required."
    }
  }
}
